type Server struct {
	Config  *Config
	Router  *chi.Mux
}

var (
	_ ServerInterface = (*Server)(nil)
)

func NewServer(options ...func(*Server)) *Server {
	server := &Server{
		Router: chi.NewRouter(),
	}

	for _, o := range options {
		o(server)
	}

	return server
}

func WithConfig(cfg *Config) func(*Server) {
	return func(server *Server) {
		server.Config = cfg
	}
}

func (s *Server) Start() error {
	api, err := GetSwagger()
	if err != nil {
		return err
	}
	api.Servers = nil

	logger := httpapi.NewLogger(s.Config.Logger)

	s.Router.Use(oapimiddleware.OapiRequestValidatorWithOptions(api, &oapimiddleware.Options{
		ErrorHandler: func(w http.ResponseWriter, message string, statusCode int) {
			_ = httpapi.SendErrorJSON(w, statusCode, fmt.Errorf("%w: %s", openapi.ErrValidation, message))
		},
	}))
	s.Router.Use(middleware.RequestID)
	s.Router.Use(middleware.RealIP)
	s.Router.Use(middleware.Recoverer)
	s.Router.Use(middleware.Timeout(s.Config.RequestContextCancelTimeout))
	s.Router.Use(httplog.RequestLogger(logger))

	HandlerFromMux(s, s.Router)

	logger.Info().Msgf("server starting on port %d", s.Config.Port)

	server := &http.Server{
		Addr:              fmt.Sprintf(":%d", s.Config.Port),
		Handler:           s.Router,
		ReadHeaderTimeout: s.Config.ReadHeaderTimeout,
	}

	if err := server.ListenAndServe(); err != nil {
		return fmt.Errorf("server listen and serve failed: %w", err)
	}

	return nil
}


{{range .}}
func (s *Server) {{.OperationId}}(w http.ResponseWriter, r *http.Request{{range .PathParams }}, {{.ParamName}} {{.Schema.GoType}}{{end}}) {
	_ = httpapi.SendErrorJSONWithRequest(w, r, http.StatusNotImplemented, httpapi.ErrNotImplemented)
}
{{end}}