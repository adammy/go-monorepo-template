var _ ServerInterface = (*Server)(nil)

type Server struct {
	config  *Config
	router  *chi.Mux
}

func NewServer(config *Config) *Server {
	return &Server{
		config:  config,
		router:  chi.NewRouter(),
	}
}

func (s *Server) Start() error {
	openapi, err := GetSwagger()
	if err != nil {
		return err
	}
	openapi.Servers = nil

	logger := httpapi.NewLogger(s.config.Logger)

	s.router.Use(oapimiddleware.OapiRequestValidatorWithOptions(openapi, &oapimiddleware.Options{
		ErrorHandler: func(w http.ResponseWriter, message string, statusCode int) {
			httpapi.SendErrorJSON(w, statusCode, errors.New(message))
		},
	}))
	s.router.Use(middleware.RequestID)
	s.router.Use(middleware.RealIP)
	s.router.Use(middleware.Recoverer)
	s.router.Use(middleware.Timeout(s.config.RequestTimeout))
	s.router.Use(httplog.RequestLogger(logger))

	HandlerFromMux(s, s.router)

	logger.Info().Msgf("server starting on port %d", s.config.Port)
	if err := http.ListenAndServe(fmt.Sprintf(":%d", s.config.Port), s.router); err != nil {
		return err
	}

	return nil
}


{{range .}}
func (s *Server) {{.OperationId}}(w http.ResponseWriter, r *http.Request{{range .PathParams }}, {{.ParamName}} {{.Schema.GoType}}{{end}}) {
	// implement me
}
{{end}}